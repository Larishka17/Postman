{
	"info": {
		"_postman_id": "570ce918-4015-4a23-9c33-2b1cd7a0ee7a",
		"name": "HW_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"var auth_token = jsonData.token; ",
							"",
							"console.log(\"Token = \" + auth_token);",
							"",
							"pm.environment.set(\"token\", auth_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "larishka",
							"type": "default"
						},
						{
							"key": "password",
							"value": "ezodem",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Status code: Code is 200.",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//2) Checking the json structure in the response.",
							"const schema = {",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"person\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"u_age\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"u_name\": {",
							"          \"type\": \"array\",",
							"          \"items\": [",
							"            {",
							"              \"type\": \"string\"",
							"            },",
							"            {",
							"              \"type\": \"integer\"",
							"            },",
							"            {",
							"              \"type\": \"integer\"",
							"            }",
							"          ]",
							"        },",
							"        \"u_salary_1_5_year\": {",
							"          \"type\": \"integer\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"u_age\",",
							"        \"u_name\",",
							"        \"u_salary_1_5_year\"",
							"      ]",
							"    },",
							"    \"qa_salary_after_12_months\": {",
							"      \"type\": \"number\"",
							"    },",
							"    \"qa_salary_after_6_months\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"start_qa_salary\": {",
							"      \"type\": \"integer\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"person\",",
							"    \"qa_salary_after_12_months\",",
							"    \"qa_salary_after_6_months\",",
							"    \"start_qa_salary\"",
							"  ]",
							"}",
							"var jsonResp = pm.response.json();",
							" pm.test(\"Validating schema\", () => {",
							"     pm.expect(jsonResp).to.have.jsonSchema(schema);",
							" })",
							"//3) The answer contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.",
							"let post_raw = JSON.parse(request.data);",
							"",
							"pm.test(\"qa_salary_after_6_months parameter is equal to salary*2 from request\", () => {",
							"  pm.expect(+jsonResp.qa_salary_after_6_months).to.eql(+post_raw.salary*2);",
							"});",
							"",
							"pm.test(\"qa_salary_after_12_months parameter is equal to salary*2.9 from request\", () => {",
							"  pm.expect(+jsonResp.qa_salary_after_12_months).to.eql(+post_raw.salary*2.9);",
							"});",
							"",
							"pm.test(\"u_salary_1_5_year parameter is equal to salary*4 from request\", () => {",
							"  pm.expect(+jsonResp.person.u_salary_1_5_year).to.eql(+post_raw.salary*4);",
							"});",
							"//4) Get the value from the 'u_salary_1.5_year' field and pass it to the salary field of the request http://162.55.220.72:5005/get_test_user",
							"var extrasalary = jsonResp.person.u_salary_1_5_year;",
							"",
							"pm.environment.set(\"salary_2\", extrasalary);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"age\": 25,\n    \"salary\": 850,\n    \"name\": \"Larina\",\n    \"auth_token\": \"{{token}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Status code: Code is 200.",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//2) Checking the json structure in the response.",
							"const schema_2 = {",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"age\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"salary\": {",
							"      \"type\": \"array\",",
							"      \"items\": [",
							"        {",
							"          \"type\": \"integer\"",
							"        },",
							"        {",
							"          \"type\": \"string\"",
							"        },",
							"        {",
							"          \"type\": \"string\"",
							"        }",
							"      ]",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"age\",",
							"    \"name\",",
							"    \"salary\"",
							"  ]",
							"}",
							"",
							"var jsonResp = pm.response.json();",
							"pm.test(\"Validating schema\", () => {",
							"      pm.expect(jsonResp).to.have.jsonSchema(schema_2);",
							" })",
							"//3) The answer contains the coefficients of salary multiplication, write tests to check the correctness of the result of multiplication by the coefficient.",
							"let post_form_data = request.data; ",
							"",
							"pm.test(\"The 2nd element of the salary array is equal to salary*2 from request\", () => {",
							"  pm.expect(+jsonResp.salary[1]).to.eql(+post_form_data.salary*2);",
							"});",
							"",
							"pm.test(\"The 3rd element of the salary array is equal to salary*3 from request\", () => {",
							"  pm.expect(+jsonResp.salary[2]).to.eql(+post_form_data.salary*3);",
							"});",
							"//4) check if 2nd element of salary array is greater than 1st and 0th",
							"pm.test(\"2nd element of salary array is greater than 1st and 0th\", () => {",
							" pm.expect(+jsonResp.salary[2]).to.greaterThan(+jsonResp.salary[1]&&jsonResp.salary[0]); ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "25",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "850",
							"type": "default"
						},
						{
							"key": "name",
							"value": "Larina",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Status code: Code is 200.",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//2) Checking the json structure in the response.",
							"const schema_3 = {",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"age\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"daily_food\": {",
							"      \"type\": \"number\"",
							"    },",
							"    \"daily_sleep\": {",
							"      \"type\": \"number\"",
							"    },",
							"    \"name\": {",
							"      \"type\": \"string\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"age\",",
							"    \"daily_food\",",
							"    \"daily_sleep\",",
							"    \"name\"",
							"  ]",
							"}",
							"",
							"var jsonResp = pm.response.json();",
							"pm.test(\"Validating schema\", () => {",
							"     pm.expect(jsonResp).to.have.jsonSchema(schema_3);",
							" })",
							"//3) The answer contains the coefficients of multiplication of weight, write tests to check the correctness of the result of multiplication by the coefficient.",
							"let post_form_data = request.data; ",
							"",
							"pm.test(\"daily_food from response is equal to weight*0.012 from request\", () => {",
							"  pm.expect(+jsonResp.daily_food).to.eql(+post_form_data.weight*0.012);",
							"});",
							"",
							"pm.test(\"daily_sleep from response is equal to weight*2.5 from request\", () => {",
							"  pm.expect(+jsonResp.daily_sleep).to.eql(+post_form_data.weight*2.5);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "25",
							"type": "default"
						},
						{
							"key": "weight",
							"value": "65",
							"type": "default"
						},
						{
							"key": "name",
							"value": "Larina",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Status code: Code is 200.",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//2) Checking the json structure in the response.",
							"const schema_4 = {",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"age\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"family\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"children\": {",
							"          \"type\": \"array\",",
							"          \"items\": [",
							"            {",
							"              \"type\": \"array\",",
							"              \"items\": [",
							"                {",
							"                  \"type\": \"string\"",
							"                },",
							"                {",
							"                  \"type\": \"integer\"",
							"                }",
							"              ]",
							"            },",
							"            {",
							"              \"type\": \"array\",",
							"              \"items\": [",
							"                {",
							"                  \"type\": \"string\"",
							"                },",
							"                {",
							"                  \"type\": \"integer\"",
							"                }",
							"              ]",
							"            }",
							"          ]",
							"        },",
							"        \"u_salary_1_5_year\": {",
							"          \"type\": \"integer\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"children\",",
							"        \"u_salary_1_5_year\"",
							"      ]",
							"    },",
							"    \"name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"salary\": {",
							"      \"type\": \"integer\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"age\",",
							"    \"family\",",
							"    \"name\",",
							"    \"salary\"",
							"  ]",
							"}",
							"",
							"var jsonResp = pm.response.json();",
							"pm.test(\"Validating schema\", () => {",
							"     pm.expect(jsonResp).to.have.jsonSchema(schema_4);",
							" })",
							"//3) Check that the value of the field name is equal to the value of the variable name from the environment.",
							"pm.test(\"the value of the field name is equal to the value of the variable name from the environment\", () => {",
							"  pm.expect(jsonResp.name).to.eql(pm.environment.get(\"name\"));",
							"});",
							"//4) Check that the value of the age field in the response matches the value of the age field sent in the request",
							"let post_form_data = request.data; ",
							"",
							"pm.test(\"the value of the age field in the response matches the value of the age field sent in the request\", () => {",
							"  pm.expect(jsonResp.age).to.eql(post_form_data.age);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "25",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary_2}}",
							"type": "default"
						},
						{
							"key": "name",
							"value": "Larina",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		}
	]
}